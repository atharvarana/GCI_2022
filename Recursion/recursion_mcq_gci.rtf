{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 ArialMT;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red44\green44\blue44;\red255\green255\blue255;\red0\green0\blue0;
\red133\green35\blue39;\red241\green241\blue241;\red18\green139\blue2;\red43\green139\blue39;\red162\green165\blue6;
\red0\green0\blue213;\red234\green234\blue234;\red0\green0\blue83;\red251\green0\blue7;\red107\green0\blue109;
\red10\green82\blue135;}
{\*\expandedcolortbl;;\cssrgb\c22745\c22745\c22745;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c60000\c20000\c20000;\cssrgb\c95686\c95686\c95686;\cssrgb\c0\c60000\c0;\cssrgb\c20000\c60000\c20000;\cssrgb\c69412\c69412\c0;
\cssrgb\c0\c0\c86667;\cssrgb\c93333\c93333\c93333;\cssrgb\c0\c0\c40000;\cssrgb\c100000\c0\c0;\cssrgb\c50196\c0\c50196;
\cssrgb\c0\c40000\c60000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18280\viewh13460\viewkind0
\deftab720
\pard\pardeftab720\qc\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
Data Structure Questions and Answers \'96 Recursion\cb1 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf2 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \
\pard\pardeftab720\sa450\partightenfactor0
\cf2 \cb3 This set of Data Structure Multiple Choice Questions & Answers (MCQs) focuses on \'93Recursion\'94.\cb1 \
\cb3 1. Recursion is a method in which the solution of a problem depends on ____________\cb1 \uc0\u8232 \cb3 a) Larger instances of different problems\cb1 \uc0\u8232 \cb3 b) Larger instances of the same problem\cb1 \uc0\u8232 \cb3 c) Smaller instances of the same problem\cb1 \uc0\u8232 \cb3 d) Smaller instances of different problems\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: c\cb1 \
\cb3 \
\
\pard\pardeftab720\sa450\partightenfactor0
\cf2 2. Which of the following problems can\'92t be solved using recursion?\cb1 \uc0\u8232 \cb3 a) Factorial of a number\cb1 \uc0\u8232 \cb3 b) Nth fibonacci number\cb1 \uc0\u8232 \cb3 c) Length of a string\cb1 \uc0\u8232 \cb3 d) Problems without base case\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: d\cb1 \
\cb3 \
\
\pard\pardeftab720\sa450\partightenfactor0
\cf2 3. Recursion is similar to which of the following?\cb1 \uc0\u8232 \cb3 a) Switch Case\cb1 \uc0\u8232 \cb3 b) Loop\cb1 \uc0\u8232 \cb3 c) If-else\cb1 \uc0\u8232 \cb3 d) if elif else\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: b
\f2\fs24 \cf0 \cb1 \
\pard\pardeftab720\qc\partightenfactor0
\cf0 \
\pard\pardeftab720\qc\partightenfactor0

\fs30 \cf0 \
\pard\pardeftab720\sa450\partightenfactor0

\f1 \cf2 \cb3 4. In recursion, the condition for which the function will stop calling itself is ____________\cb1 \uc0\u8232 \cb3 a) Best case\cb1 \uc0\u8232 \cb3 b) Worst case\cb1 \uc0\u8232 \cb3 c) Base case\cb1 \uc0\u8232 \cb3 d) There is no such condition\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: c\cb1 \
\cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sa450\partightenfactor0
\cf2 \cb3 5. What will happen when the below code snippet is executed?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 void\cf2  my_recursive_function\cf7 ()\cf2 \
\cf7 \{\cf2 \
   my_recursive_function\cf7 ()\cf8 ;\cf2 \
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
   my_recursive_function\cf7 ()\cf8 ;\cf2 \
   \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) The code will be executed successfully and no output will be generated\cb1 \uc0\u8232 \cb3 b) The code will be executed successfully and random output will be generated\cb1 \uc0\u8232 \cb3 c) The code will show a compile time error\cb1 \uc0\u8232 \cb3 d) The code will run for some time and stop when the stack overflows\cb1 \uc0\u8232 \cb11 \
\cb3 Answer: d\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa450\partightenfactor0
\cf2 6. What is the output of the following code?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 void\cf2  my_recursive_function\cf7 (\cf5 int\cf2  n\cf7 )\cf2 \
\cf7 \{\cf2 \
    \cf9 if\cf7 (\cf2 n \cf8 ==\cf2  \cf10 0\cf7 )\cf2 \
    \cf9 return\cf8 ;\cf2 \
    \cf12 printf\cf7 (\cf13 "%d "\cf8 ,\cf2 n\cf7 )\cf8 ;\cf2 \
    my_recursive_function\cf7 (\cf2 n\cf8 -\cf10 1\cf7 )\cf8 ;\cf2 \
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
    my_recursive_function\cf7 (\cf10 10\cf7 )\cf8 ;\cf2 \
    \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) 10\cb1 \uc0\u8232 \cb3 b) 1\cb1 \uc0\u8232 \cb3 c) 10 9 8 \'85 1 0\cb1 \uc0\u8232 \cb3 d) 10 9 8 \'85 1\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: d\cb1 \
\cb3 \
\
\pard\pardeftab720\sa450\partightenfactor0
\cf2 7. What is the base case for the following code?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 void\cf2  my_recursive_function\cf7 (\cf5 int\cf2  n\cf7 )\cf2 \
\cf7 \{\cf2 \
     \cf9 if\cf7 (\cf2 n \cf8 ==\cf2  \cf10 0\cf7 )\cf2 \
     \cf9 return\cf8 ;\cf2 \
     \cf12 printf\cf7 (\cf13 "%d "\cf8 ,\cf2 n\cf7 )\cf8 ;\cf2 \
     my_recursive_function\cf7 (\cf2 n\cf8 -\cf10 1\cf7 )\cf8 ;\cf2 \
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
     my_recursive_function\cf7 (\cf10 10\cf7 )\cf8 ;\cf2 \
     \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) return\cb1 \uc0\u8232 \cb3 b) printf(\'93%d \'93, n)\cb1 \uc0\u8232 \cb3 c) if(n == 0)\cb1 \uc0\u8232 \cb3 d) my_recursive_function(n-1)\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: c\cb1 \
\cb3 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sa450\partightenfactor0
\cf2 \cb3 8. How many times is the recursive function called, when the following code is executed?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 void\cf2  my_recursive_function\cf7 (\cf5 int\cf2  n\cf7 )\cf2 \
\cf7 \{\cf2 \
     \cf9 if\cf7 (\cf2 n \cf8 ==\cf2  \cf10 0\cf7 )\cf2 \
     \cf9 return\cf8 ;\cf2 \
     \cf12 printf\cf7 (\cf13 "%d "\cf8 ,\cf2 n\cf7 )\cf8 ;\cf2 \
     my_recursive_function\cf7 (\cf2 n\cf8 -\cf10 1\cf7 )\cf8 ;\cf2 \
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
     my_recursive_function\cf7 (\cf10 10\cf7 )\cf8 ;\cf2 \
     \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) 9\cb1 \uc0\u8232 \cb3 b) 10\cb1 \uc0\u8232 \cb3 c) 11\cb1 \uc0\u8232 \cb3 d) 12\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: c\cb1 \
\cb3 \
\pard\pardeftab720\sa450\partightenfactor0
\cf2 \cb1 \
\cb3 9. What does the following recursive code do?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 void\cf2  my_recursive_function\cf7 (\cf5 int\cf2  n\cf7 )\cf2 \
\cf7 \{\cf2 \
     \cf9 if\cf7 (\cf2 n \cf8 ==\cf2  \cf10 0\cf7 )\cf2 \
     \cf9 return\cf8 ;\cf2 \
     my_recursive_function\cf7 (\cf2 n\cf8 -\cf10 1\cf7 )\cf8 ;\cf2 \
     \cf12 printf\cf7 (\cf13 "%d "\cf8 ,\cf2 n\cf7 )\cf8 ;\cf2 \
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
     my_recursive_function\cf7 (\cf10 10\cf7 )\cf8 ;\cf2 \
     \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) Prints the numbers from 10 to 1\cb1 \uc0\u8232 \cb3 b) Prints the numbers from 10 to 0\cb1 \uc0\u8232 \cb3 c) Prints the numbers from 1 to 10\cb1 \uc0\u8232 \cb3 d) Prints the numbers from 0 to 10\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: c\cb1 \
\cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sa450\partightenfactor0
\cf2 \cb3 10. Which of the following statements is true?\cb1 \uc0\u8232 \cb3 a) Recursion is always better than iteration\cb1 \uc0\u8232 \cb3 b) Recursion uses more memory compared to iteration\cb1 \uc0\u8232 \cb3 c) Recursion uses less memory compared to iteration\cb1 \uc0\u8232 \cb3 d) Iteration is always better and simpler than recursion\cb1 \uc0\u8232 \cb11 \
\cb3 Answer: b\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sa450\partightenfactor0
\cf2 \cb3 11. What will be the output of the following code?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 int\cf2  cnt\cf8 =\cf10 0\cf8 ;\cf2 \
\cf5 void\cf2  my_recursive_function\cf7 (\cf5 int\cf2  n\cf7 )\cf2 \
\cf7 \{\cf2 \
     \cf9 if\cf7 (\cf2 n \cf8 ==\cf2  \cf10 0\cf7 )\cf2 \
     \cf9 return\cf8 ;\cf2 \
     cnt\cf8 ++;\cf2 \
     my_recursive_function\cf7 (\cf2 n\cf8 /\cf10 10\cf7 )\cf8 ;\cf2 \
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
     my_recursive_function\cf7 (\cf10 123456789\cf7 )\cf8 ;\cf2 \
     \cf12 printf\cf7 (\cf13 "%d"\cf8 ,\cf2 cnt\cf7 )\cf8 ;\cf2 \
     \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) 123456789\cb1 \uc0\u8232 \cb3 b) 10\cb1 \uc0\u8232 \cb3 c) 0\cb1 \uc0\u8232 \cb3 d) 9\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: d\cb1 \
\cb3 \
\
\pard\pardeftab720\sa450\partightenfactor0
\cf2 12. What will be the output of the following code?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 void\cf2  my_recursive_function\cf7 (\cf5 int\cf2  n\cf7 )\cf2 \
\cf7 \{\cf2 \
    \cf9 if\cf7 (\cf2 n \cf8 ==\cf2  \cf10 0\cf7 )\cf2 \
    \cf7 \{\cf2 \
         \cf12 printf\cf7 (\cf13 "False"\cf7 )\cf8 ;\cf2 \
	   \cf9 return\cf8 ;\cf2 \
    \cf7 \}\cf2 \
    \cf9 if\cf7 (\cf2 n \cf8 ==\cf2  \cf10 1\cf7 )\cf2 \
    \cf7 \{\cf2 \
         \cf12 printf\cf7 (\cf13 "True"\cf7 )\cf8 ;\cf2 \
         \cf9 return\cf8 ;\cf2 \
    \cf7 \}\cf2 \
    \cf9 if\cf7 (\cf2 n\cf8 %\cf14 2\cf8 ==\cf10 0\cf7 )\cf2 \
    my_recursive_function\cf7 (\cf2 n\cf8 /\cf10 2\cf7 )\cf8 ;\cf2 \
    \cf9 else\cf2 \
    \cf7 \{\cf2 \
         \cf12 printf\cf7 (\cf13 "False"\cf7 )\cf8 ;\cf2 \
         \cf9 return\cf8 ;\cf2 \
    \cf7 \}\cf2 \
\'a0\
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
     my_recursive_function\cf7 (\cf10 100\cf7 )\cf8 ;\cf2 \
     \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) True\cb1 \uc0\u8232 \cb3 b) False\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: b\cb1 \
\cb3 \
\
\
\pard\pardeftab720\sa450\partightenfactor0
\cf2 13. What is the output of the following code?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 int\cf2  cnt \cf8 =\cf2  \cf10 0\cf8 ;\cf2 \
\cf5 void\cf2  my_recursive_function\cf7 (\cf5 char\cf2  \cf8 *\cf2 s\cf8 ,\cf2  \cf5 int\cf2  i\cf7 )\cf2 \
\cf7 \{\cf2 \
     \cf9 if\cf7 (\cf2 s\cf7 [\cf2 i\cf7 ]\cf2  \cf8 ==\cf2  \cf13 '\cf15 \\0\cf13 '\cf7 )\cf2 \
        \cf9 return\cf8 ;\cf2 \
     \cf9 if\cf7 (\cf2 s\cf7 [\cf2 i\cf7 ]\cf2  \cf8 ==\cf2  \cf13 'a'\cf2  \cf8 ||\cf2  s\cf7 [\cf2 i\cf7 ]\cf2  \cf8 ==\cf2  \cf13 'e'\cf2  \cf8 ||\cf2  s\cf7 [\cf2 i\cf7 ]\cf2  \cf8 ==\cf2  \cf13 'i'\cf2  \cf8 ||\cf2  s\cf7 [\cf2 i\cf7 ]\cf2  \cf8 ==\cf2  \cf13 'o'\cf2  \cf8 ||\cf2  s\cf7 [\cf2 i\cf7 ]\cf2  \cf8 ==\cf2  \cf13 'u'\cf7 )\cf2 \
     cnt\cf8 ++;\cf2 \
     my_recursive_function\cf7 (\cf2 s\cf8 ,\cf2 i\cf8 +\cf10 1\cf7 )\cf8 ;\cf2 \
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
     my_recursive_function\cf7 (\cf13 "thisisrecursion"\cf8 ,\cf10 0\cf7 )\cf8 ;\cf2 \
     \cf12 printf\cf7 (\cf13 "%d"\cf8 ,\cf2 cnt\cf7 )\cf8 ;\cf2 \
     \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) 6\cb1 \uc0\u8232 \cb3 b) 9\cb1 \uc0\u8232 \cb3 c) 5\cb1 \uc0\u8232 \cb3 d) 10\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: a\cb1 \
\cb3 \
\
\pard\pardeftab720\sa450\partightenfactor0
\cf2 14. What is the output of the following code?\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 void\cf2  my_recursive_function\cf7 (\cf5 int\cf2  \cf8 *\cf2 arr\cf8 ,\cf2  \cf5 int\cf2  val\cf8 ,\cf2  \cf5 int\cf2  idx\cf8 ,\cf2  \cf5 int\cf2  len\cf7 )\cf2 \
\cf7 \{\cf2 \
    \cf9 if\cf7 (\cf2 idx \cf8 ==\cf2  len\cf7 )\cf2 \
    \cf7 \{\cf2 \
         \cf12 printf\cf7 (\cf13 "-1"\cf7 )\cf8 ;\cf2 \
         \cf9 return\cf2  \cf8 ;\cf2 \
    \cf7 \}\cf2 \
    \cf9 if\cf7 (\cf2 arr\cf7 [\cf2 idx\cf7 ]\cf2  \cf8 ==\cf2  val\cf7 )\cf2 \
    \cf7 \{\cf2 \
         \cf12 printf\cf7 (\cf13 "%d"\cf8 ,\cf2 idx\cf7 )\cf8 ;\cf2 \
         \cf9 return\cf8 ;\cf2 \
    \cf7 \}\cf2 \
    my_recursive_function\cf7 (\cf2 arr\cf8 ,\cf2 val\cf8 ,\cf2 idx\cf8 +\cf10 1\cf8 ,\cf2 len\cf7 )\cf8 ;\cf2 \
\cf7 \}\cf2 \
\cf5 int\cf2  main\cf7 ()\cf2 \
\cf7 \{\cf2 \
     \cf5 int\cf2  array\cf7 [\cf10 10\cf7 ]\cf2  \cf8 =\cf2  \cf7 \{\cf10 7\cf8 ,\cf2  \cf10 6\cf8 ,\cf2  \cf10 4\cf8 ,\cf2  \cf10 3\cf8 ,\cf2  \cf10 2\cf8 ,\cf2  \cf10 1\cf8 ,\cf2  \cf10 9\cf8 ,\cf2  \cf10 5\cf8 ,\cf2  \cf10 0\cf8 ,\cf2  \cf10 8\cf7 \}\cf8 ;\cf2 \
     \cf5 int\cf2  value \cf8 =\cf2  \cf10 2\cf8 ;\cf2 \
     \cf5 int\cf2  len \cf8 =\cf2  \cf10 10\cf8 ;\cf2 \
     my_recursive_function\cf7 (\cf2 array\cf8 ,\cf2  value\cf8 ,\cf2  \cf10 0\cf8 ,\cf2  len\cf7 )\cf8 ;\cf2 \
     \cf9 return\cf2  \cf10 0\cf8 ;\cf2 \
\cf7 \}\cf2 \
\pard\pardeftab720\sa450\partightenfactor0

\f1\fs30 \cf2 \cb3 a) 3\cb1 \uc0\u8232 \cb3 b) 4\cb1 \uc0\u8232 \cb3 c) 5\cb1 \uc0\u8232 \cb3 d) 6\cb1 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Answer: b\cb1 \
\cb3 \
\
}